//TODO - potential automated unit tests maybe for like jenkins or smoething
//passwords match in authentication
//check the various test cases in the create user form like checking if an object is returned, or if syntax is correct when getting a username, database returns a user
//profile throws an error if you try to put a letter in the database query that checks for an id
//maybe possible to unit test a view?  profile.ejs has logic checking if a user is logged in or if a user is the currently viewed profile
//test logic that checks if user is logged in in general


/*
<!--
-->

//current status
<!--
later - add to read db - probably a cleaner way to do this part other than throwing random exceptions.   look into it.
-->

<!--
feed functionality
tags - maybe need to add it when user actually posts, and then have way to add it after - done but not auto tested

search tags
    -make sure it is still possible to add and remove tags and all that - done but not auto tested
-->

<!--
    bug -done? spaces between lines of letters in reading post

      

later - in relation to tabs filters and sorts
  TODO - feedSort and feedFilter need testing and error handling



-->
<!---->

bugs - potentially not parsing valid emails, but can't replicate rn.  will need more testing if more extensive, but works 99 percent of the time

//reada page
  //<div>Icons made by <a href="https://www.flaticon.com/authors/freepik" title="Freepik">Freepik</a> from <a href="https://www.flaticon.com/" title="Flaticon">www.flaticon.com</a></div>


    //post not bolding - fixed
//if on later page then search, says that page in url even search should begin on page 1.  will need to look into search results that have multiple pages - done, need test



//only sending 1 email-fixed

//frontend bugs
//error when clicking bookmark when not logged in.  just redirect to error page for now, but says post not found even though should be acct not logged in??
  //works fine when doing it from profile (subscribe and unsubscribe from user) - low
//cant rerender comment with error.  currently just redirecting to page with empty comment - low
//file too large error page addition/change - create error page
  -todo - add a page that says bookmarked already error
//create an error handling page (example 404 page, please try again.) - need test
  //edit post when wrong user redirects without using bookmark causing an error - neet test(i think this is an error page?)
//sessions shows logged in after clicking logged out


//backend bugs
//image upload weird when uploading long image
//uploading non image disguised as image crashes system
//sometimes imge upload crashes system
//scheduler not really working
//can subscribe multiple times to 1 user
//cant add quote tags as in " "



    //automated testing fixes, feature testing, cleanup and error pages (remove console.logs unless needed), deploy
        //look up app.close error tcpserverwrap jest when you start working on deploy
        //add link to profile - done, need test
      //update emailer to email every hour, but only email if timezone preference is currently aligned - x
      //map - convert timezone name to an integer, store that int to db.  Counter running, select query will be 'when tz = counter'. x


//list of stretch goals
//known issues emailer
//html taken literally aka it'll break lines halfway through the page bc thats what the html says - stretch
//attachments, pictures, links not working - stretch
//authResetEmail getNewToken doesn't call function. - strecth

  //email sending ** for bold - stretch, not working bc simpleparser textAsHtml vs HTML.
  //search/sort posts by user (profile page) - stretch, requires refactoring
  //back end update timezones on register - change to selector stretch, not sure why its not working

//stretch - add function that adds "Last month today/last year today/ last week today type message to send emails."
<!--edit post
    stretch: referrer so that you can only get to write from the edit button.
    stretch: edit button location
    later: edit quill toolbaar
-->
<!--post comment
later: styling for comments and post page in general
stretch: reply to comments
-->
stretch feed - add 'posts not found'
later - search
  -stretch is full text search

allow superuser to edit comments - feature is stretch
  -stretch is have page numbers.  difficult bc i dont know how many pages ill have/how to template it.

<!--technical debt
styling - maybe try to put it into style sheets
unit testing - maybe figure out how to do that + automated testing
-->*/

add permissions functionality
-admin feed

//need validation styling and need to figure out maxlength

//emailer double replies
  "This function does not work for double replies, so improvement for the future
//is to try to make this function work for double replies or at least check for double replies."
//authResetemail

feed - //go directly to comment stretch

testrun 1 - new user not logged in 
  //profile feed displays private posts -- fixed and tested


testrun 2 - new user registering and exploring
//need about section -- fixed and tested
//need helper text when registering - fixed and tested
//initial image upload for new user breaks? can't recreate yet


testrun 3 - user who wants to create chaos
//view current timezone - slip
//some kind of spam filter - slip
//lots of unhandled promises - priority? slip?

//limit post and comment size - fixed and tested
//need to handle error when title too long - fixed and tested
//no word wrap on write box
//long titles break feed if not wrapped - fixed and tested

testrun 4 - super user
//says subscribe error when going to user that doesn't exist -foxed and tested
//admins cant reset other users passwords - fixed tested
//password attempt limit - fixed



tutorials, ec2, ebs

environment vars and urls
-only urls are password reset urls rn

run in background*
-install forever*
database*
 -install compression*
timer
 -make it so deployment sets time emails sent

Deployment procedures
setup db
  sudo -i -u postgres
  psql
  ALTER USER postgres PASSWORD 'whatever password';
  go back home
  sudo -u postgres createdb mylife-prod
  sudo -u postgres psql -d mylife-prod to connect

pull project
  git clone -b prod-changes https://github.com/gassoth/mylife.git
  npm install
  
env variables -- instead can just put this in .env
  export TOKENSECRET="(whatever TOKENSECRET)"
  export DATABASE_URL="(whatever url)"
  export SESSION_SECRET="(whatever sesion secret)"
  export NODE_ENV=production (maybe)

project stuff
  set knex db to production
  npx knex migrate:latest
  npm install forever -g
  move over 4 home page files and default image file
  scp -i ../mylife.pem ./public/images/test-book.png ubuntu@ec2-3-137-146-193.us-east-2.compute.amazonaws.com:/home/ubuntu/
  scp -i ../mylife.pem ./public/images/test-edit.png ubuntu@ec2-3-137-146-193.us-east-2.compute.amazonaws.com:/home/ubuntu/
  scp -i ../mylife.pem ./public/images/test-lock.png ubuntu@ec2-3-137-146-193.us-east-2.compute.amazonaws.com:/home/ubuntu/
  scp -i ../mylife.pem ./public/images/test-user.png ubuntu@ec2-3-137-146-193.us-east-2.compute.amazonaws.com:/home/ubuntu/
  scp -i ../mylife.pem ./public/images/user.png ubuntu@ec2-3-137-146-193.us-east-2.compute.amazonaws.com:/home/ubuntu/
  move to images folder
  uncomment the console.log thing in app.js if you want to

get google token
  move credentials.json over
  DEBUG=mylife:* npm run devstart
  go to testsend
  follow prompts

setup proxy
  sudo apt-get install nginx
  sudo emacs /etc/nginx/conf.d/sysmon.conf 

  server {
    listen 80;
    server_name mylifejournal.net;

    location / {
        proxy_set_header   X-Forwarded-For $remote_addr;
        proxy_set_header   Host $http_host;
        proxy_pass         http://18.223.175.121:3000/;
    }
  }server {
        server_name 18.223.175.121;
        add_header X-Frame-Options "SAMEORIGIN";

        return 301 $scheme://mylifejournal.net$request_uri;
  }

  sudo systemctl restart nginx

certbot
  sudo snap install --classic certbot
  sudo ln -s /snap/bin/certbot /usr/bin/certbot
  sudo certbot --nginx
  sudo certbot renew --dry-run

//todo
push git changes from prod ec2 -xx
DNS stuff + the url -xx
set env to prod and test that script
  .env file? -xx
setup correct security routing
using rds -xx
using s3
using ebs
https://www.digitalocean.com/community/tutorials/how-to-install-and-use-postgresql-on-ubuntu-18-04 - adduser?

stretch - helmet
canonical name error


changes when rds
rds db
  require('dotenv').config({path: './.env'});
        connection: {
            port: 5432,
            host: process.env.DATABASE_URL,
            user: 'postgres',
            password: '***REMOVED***',
            database: 'postgres'
        },

  in knexfile, then in .env, you just put the rds url


buckets
uploading

getting
  if file exist in bucket - display that file
  else display generic profile pic





bad gateway when using https
does not support over 1000 users when using s3.  easy fix, but no time rn to do
